import numpy as np
import matplotlib.pyplot as plt

def generate_ou_process(x0, mu, theta, sigma, dt, n_steps):
    """
    Generate an Ornstein-Uhlenbeck process.
    
    Args:
        x0 (float): Initial value of the process.
        mu (float): Long-term mean of the process.
        theta (float): Speed of mean reversion.
        sigma (float): Volatility of the process.
        dt (float): Time step.
        n_steps (int): Number of time steps.
        
    Returns:
        numpy.ndarray: The generated Ornstein-Uhlenbeck process.
    """
    x = np.zeros(n_steps + 1)
    x[0] = x0
    for i in range(1, n_steps + 1):
        x[i] = x[i - 1] + theta * (mu - x[i - 1]) * dt + sigma * np.sqrt(dt) * np.random.normal()
    return x

def optimal_entry_level(X, r, c):
    """
    Computes the optimal level for entering a long position given a rough path X,
    risk-free rate r, and fixed transaction cost c.
    
    Args:
        X (numpy.ndarray): A 1D array representing the rough path sample.
        r (float): The risk-free rate.
        c (float): The fixed transaction cost.
        
    Returns:
        float or None: The optimal level for entering a long position.
    """
    # Compute the payoff process Y
    T = len(X)
    Y = np.zeros(T)
    for t in range(T):
        Y[t] = np.exp(-r * t) * (-X[t] - c)
    
    # Find the supremum of Y and its corresponding level
    supremum_idx = np.argmax(Y)
    optimal_entry_level = -X[supremum_idx] - c

    # Check if the supremum is positive (i.e., profitable to enter)
    if optimal_entry_level > 0:
        return optimal_entry_level
    else:
        return None

def optimal_exit_level(X, r, c, entry_level):
    """
    Computes the optimal level for exiting a long position given a rough path X,
    risk-free rate r, fixed transaction cost c, and entry level.
    
    Args:
        X (numpy.ndarray): A 1D array representing the rough path sample.
        r (float): The risk-free rate.
        c (float): The fixed transaction cost.
        entry_level (float or None): The optimal level for entering the long position.
        
    Returns:
        float or None: The optimal level for exiting the long position.
    """
    if entry_level is None:
        return None
    
    # Compute the payoff process Y
    T = len(X)
    Y = np.zeros(T)
    for t in range(T):
        Y[t] = np.exp(-r * t) * (X[t] - c)
    
    # Find the supremum of Y and its corresponding level
    supremum_idx = np.argmax(Y)
    optimal_exit_level = X[supremum_idx] - c

    # Check if the supremum is positive (i.e., profitable to exit)
    if optimal_exit_level > 0:
        return optimal_exit_level
    else:
        return None

# Parameters
x0 = 0.0       # Initial value of the OU process
mu = 0.0       # Long-term mean
theta = 0.5    # Speed of mean reversion
sigma = 0.2    # Volatility
dt = 0.01      # Time step
n_steps = 250  # Number of time steps

# Risk-free rate and fixed transaction cost
r = 0.05
c = .0001

# Generate the rough path (OU process)
X = generate_ou_process(x0, mu, theta, sigma, dt, n_steps)

# Recursively find the optimal entry and exit levels
optimal_policies = []
remaining_path = X.copy()
current_time = 0

while current_time < n_steps:
    optimal_entry_level_value = optimal_entry_level(remaining_path, r, c)
    if optimal_entry_level_value is None:
        break
    entry_idx = np.argmin(np.abs(remaining_path - optimal_entry_level_value))
    optimal_entry_level_value = remaining_path[entry_idx]
    
    optimal_exit_level_value = optimal_exit_level(remaining_path[entry_idx:], r, c, optimal_entry_level_value)
    if optimal_exit_level_value is None:
        break
    exit_idx = np.argmin(np.abs(remaining_path[entry_idx:] - optimal_exit_level_value)) + entry_idx + 1
    optimal_exit_level_value = remaining_path[exit_idx]
    
    optimal_policies.append((optimal_entry_level_value, optimal_exit_level_value))
    
    # Remove the segment of the path corresponding to the optimal policy
    remaining_path = remaining_path[exit_idx + 1:]
    current_time = exit_idx + 1

# Print the results
num_optimal_policies = len(optimal_policies)
print(f"Number of optimal policies found: {num_optimal_policies}")
print("Optimal Entry and Exit Levels:")
for i, (entry, exit) in enumerate(optimal_policies):
    print(f"Policy {i + 1}: Entry Level = {entry:.2f}, Exit Level = {exit:.2f}")

# Plot the rough path and overlay the optimal entry and exit points
time = np.arange(n_steps + 1) * dt
plt.figure(figsize=(10, 6))
plt.plot(time, X)
plt.xlabel('Time')
plt.ylabel('Rough Path')
plt.title('Rough Path (Ornstein-Uhlenbeck Process)')

for entry_level, exit_level in optimal_policies:
    entry_time = time[np.argmin(np.abs(X - entry_level))]
    exit_time = time[np.argmin(np.abs(X - exit_level))]
    plt.scatter(entry_time, entry_level, color='g', marker='*', s=100, label='Optimal Entry Point')
    plt.scatter(exit_time, exit_level, color='r', marker='*', s=100, label='Optimal Exit Point')

plt.legend()
plt.show()
